package components

import (
	"github.com/inaryzen/priotasks/consts"
	"github.com/inaryzen/priotasks/models"
	"strconv"
	"fmt"
)

templ TaskModal(card models.Task, taskTags map[models.TaskTag]bool, allTags []models.TaskTag) {
	<div id="modal-card" class="modal" style="display: flex">
		<div class="modal-content" id="modalContent">
			@ModalTaskForm(card) {
				<input type="hidden" name="card-id" value={ card.Id }/>
				<div class="modal-title-row">
					<input type="text" id="card-title" name="card-title" class="modal-task-title" value={ card.Title } placeholder="Card title..."/>
				</div>
				<textarea id="card-text" name="card-text" class="modal-task-text" rows="10" placeholder="Write your text here...">{ card.Content }</textarea>
								<div class="select-controls-row">
					<select id="modal-task-priority" name="modal-task-priority" class="modal-task-priority default-select">
						<option
							value="3"
							if card.Priority == models.PriorityUrgent {
								selected
							} 
						>{ models.PriorityUrgent.ToStr() }</option>
						<option
							value="2"
							if card.Priority == models.PriorityHigh {
								selected
							}
						>{ models.PriorityHigh.ToStr() }</option>
						<option
							value="1"
							if card.Priority == models.PriorityMedium {
								selected
							}
						>{ models.PriorityMedium.ToStr() }</option>
						<option
							value="0"
							if card.Priority == models.PriorityLow {
								selected
							}
						>{ models.PriorityLow.ToStr() }</option>
					</select>
					<select id="modal-task-impact" name="modal-task-impact" class="modal-task-impact default-select">
						<option
							value="4"
							if card.Impact == models.ImpactHigh {
								selected
							}
						>{ models.ImpactHigh.ToHumanString() }</option>
						<option
							value="3"
							if card.Impact == models.ImpactConsiderable {
								selected
							}
						>{ models.ImpactConsiderable.ToHumanString() }</option>
						<option
							value="2"
							if card.Impact == models.ImpactModerate {
								selected
							}
						>{ models.ImpactModerate.ToHumanString() }</option>
						<option
							value="1"
							if card.Impact == models.ImpactLow {
								selected
							}
						>{ models.ImpactLow.ToHumanString() }</option>
						<option
							value="0"
							if card.Impact == models.ImpactSlight {
								selected
							}
						>{ models.ImpactSlight.ToHumanString() }</option>
					</select>
					<select id={ consts.MODAL_TASK_COST_NAME } name={ consts.MODAL_TASK_COST_NAME } class="modal-task-cost default-select">
						<option
							value={ strconv.Itoa(int(models.CostXS)) }
							if card.Cost == models.CostXS {
								selected
							}
						>{ models.CostXS.ToHumanString() }</option>
						<option
							value={ strconv.Itoa(int(models.CostS)) }
							if card.Cost == models.CostS {
								selected
							}
						>{ models.CostS.ToHumanString() }</option>
						<option
							value={ strconv.Itoa(int(models.CostM)) }
							if card.Cost == models.CostM {
								selected
							}
						>{ models.CostM.ToHumanString() }</option>
						<option
							value={ strconv.Itoa(int(models.CostL)) }
							if card.Cost == models.CostL {
								selected
							}
						>{ models.CostL.ToHumanString() }</option>
						<option
							value={ strconv.Itoa(int(models.CostXL)) }
							if card.Cost == models.CostXL {
								selected
							}
						>{ models.CostXL.ToHumanString() }</option>
						<option
							value={ strconv.Itoa(int(models.CostXXL)) }
							if card.Cost == models.CostXXL {
								selected
							}
						>{ models.CostXXL.ToHumanString() }</option>
					</select>
					<select id="modal-task-fun" name="modal-task-fun" class="modal-task-fun default-select">
						<option
							value="0"
							if card.Fun == models.FunS {
								selected
							}
						>{ models.FunS.ToHumanString() }</option>
						<option
							value="1"
							if card.Fun == models.FunM {
								selected
							}
						>{ models.FunM.ToHumanString() }</option>
						<option
							value="2"
							if card.Fun == models.FunL {
								selected
							}
						>{ models.FunL.ToHumanString() }</option>
						<option
							value="3"
							if card.Fun == models.FunXL {
								selected
							}
						>{ models.FunXL.ToHumanString() }</option>
					</select>
				</div>
				<div class="tags-list">
					<div class="tags-list-header">Tags</div>
					@TagsListContent(card, taskTags, allTags)
				</div>
				<div class="add-tag-container">
					<input
						type="text"
						id={ consts.INPUT_NAME_NEW_TAG }
						class="new-tag-input"
						name={ consts.INPUT_NAME_NEW_TAG }
						placeholder="Enter new tag..."
					/>
					<button
						type="button"
						class="btn-add-tag"
						hx-post="/tags"
						hx-include={ "#" + consts.INPUT_NAME_NEW_TAG }
						hx-target="#tags-list-content"
						hx-swap="beforeend scroll:bottom"
					>
						Add Tag
					</button>
				</div>
				<div class="task-flags">
					<label class="checkbox-label">
						<input
							type="checkbox"
							name="task-wip"
							if card.Wip {
								checked
							}
						/>
						Work in Progress
					</label>
					<label class="checkbox-label">
						<input
							type="checkbox"
							name="task-planned"
							if card.Planned {
								checked
							}
						/>
						Planned
					</label>
					<label class="checkbox-label">
						<input
							type="checkbox"
							name="task-completed"
							if card.IsCompleted() {
								checked
							}
						/>
						Completed
					</label>
				</div>
				<div class="form-buttons">
					<div class="form-buttons-left">
						if !card.IsEmpty() {
							<button
								type="button"
								class="btn-clone"
								hx-post={ fmt.Sprintf("/tasks/%s/clone", card.Id) }
								hx-target="#modal-card"
								hx-swap="outerHTML"
							>
								Clone
							</button>
							<button
								type="button"
								class="btn-delete"
								hx-delete={ fmt.Sprintf("/tasks/%s", card.Id) }
								hx-target="#cards-table"
								hx-swap="innerHTML"
								hx-confirm="Are you sure you want to delete this task?"
								hx-on:htmx:after-request="closeModal('modal-card')"
							>
								Delete
							</button>
						}
					</div>
					<div class="form-buttons-right">
						<button
							type="button"
							class="btn-save"
							if card.IsEmpty() {
								hx-post="/tasks"
							} else {
								hx-put="/tasks"
							}
							hx-target="#cards-table"
							hx-swap="innerHTML"
							hx-include="#task-form"
							hx-on:htmx:after-request="closeModal('modal-card')"
						>
							Save
						</button>
						<button type="button" class="btn-cancel" onclick="closeModal('modal-card')">Cancel</button>
					</div>
				</div>
			}
		</div>
	</div>
}

templ ModalTaskForm(card models.Task) {
	<form id="task-form">
		{ children... }
	</form>
}

templ TaskModalTag(tag models.TaskTag, selected bool) {
	<div class="tag-item">
		<input
			type="checkbox"
			id={ "tag-" + string(tag) }
			name={ "tag-" + string(tag) }
			checked?={ selected }
		/>
		<label for={ "tag-" + string(tag) } class="tag-label">
			{ string(tag) }
		</label>
		<button 
			type="button" 
			class="tag-delete-btn"
			hx-delete={ "/tags/" + string(tag) }
			hx-confirm="Are you sure you want to delete this tag?"
			hx-target="#tags-list-content"
			hx-swap="outerHTML">üóëÔ∏è</button>
	</div>
}

templ TagsListContent(card models.Task, taskTags map[models.TaskTag]bool, allTags []models.TaskTag) {
	<div id="tags-list-content" class="tags-list-content">
		for _, tag := range allTags {
			@TaskModalTag(tag, taskTags[tag])
		}
	</div>
}
