package components

import (
	"fmt"
	"github.com/inaryzen/priotasks/consts"
	"github.com/inaryzen/priotasks/models"
	"strconv"
)

templ SortableHeader(st models.Settings, sortColumn models.SortColumn) {
	<th class="sortable-header">
		<form
			hx-post={ consts.URL_TOGGLE_SORT_TABLE }
			hx-target="#cards-table"
			hx-swap="innerHTML"
		>
			<input type="hidden" name={ consts.SORT_COLUMN_NAME } value={ strconv.Itoa(int(sortColumn)) }/>
			if st.TasksQuery.SortColumn == sortColumn {
				<input type="hidden" name={ consts.SORT_DIRECTION_NAME } value={ strconv.Itoa(int(st.TasksQuery.SortDirection)) }/>
			}
			<button type="submit" class={ "header-button", "sortable", templ.KV("sorted-desc", st.IsSorted(sortColumn, models.Desc)), templ.KV("sorted-asc", st.IsSorted(sortColumn, models.Asc)) }>
				{ sortColumn.ToHumanString() }
			</button>
		</form>
	</th>
}

templ TaskTable(cards []models.Task, st models.Settings) {
	<table id="cards-table">
		<colgroup>
			<col style="width: 60px;"/>
			<col style="width: 150px;"/> // Tags
			<col style="width: 500px;"/>
			<col style="width: 60px;"/>
			<col style="width: 140px;"/>
			<col style="width: 160px;"/> // Impact
			<col style="width: 60px;"/> // WIP
			<col style="width: 60px;"/> // Planned
			<col style="width: 120px;"/> // Value
			<col style="width: 200px;"/>
			<col style="width: 200px;"/>
			<col style="width: 200px;"/>
			<col style="width: 60px;"/>
			<col style="width: auto;"/>
		</colgroup>
		<thead>
			<tr>
				<th>Done</th>
				<th>Tags</th>
				<th>Title</th>
				@SortableHeader(st, models.ColumnCost)
				@SortableHeader(st, models.Priority)
				@SortableHeader(st, models.ColumnImpact)
				@SortableHeader(st, models.ColumnWip)
				@SortableHeader(st, models.ColumnPlanned)
				@SortableHeader(st, models.ColumnValue)
				@SortableHeader(st, models.Completed)
				@SortableHeader(st, models.Created)
				<th>Updated</th>
				<th></th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			for _, c := range cards {
				<tr>
					<td id="column-completed-status">
						<input
							if c.IsCompleted() {
								checked
							}
							name="card-completed"
							type="checkbox"
							hx-trigger="change"
							hx-post={ string(templ.URL(fmt.Sprintf("/tasks/%s/toggle-completed", c.Id))) }
						/>
					</td>
					<td id="column-tags" class="column-tags">
						for _, tag := range c.Tags {
							<span class="tag-pill">{ string(tag) }</span>
						}
					</td>
					<td id="column-title" class="column-title"><a href="#" hx-get={ string(templ.URL(fmt.Sprintf("/view/task/%s", c.Id))) } hx-target="#modal-card" hx-swap="outerHTML">{ c.Title }</a></td>
					<td id="column-impact">{ c.Cost.ToHumanString() }</td>
					<td id="column-priority">{ c.Priority.ToStr() }</td>
					<td id="column-impact">{ c.Impact.ToHumanString() }</td>
					<td id="column-wip" class="status-column">
						if c.Wip {
							<span title="Work in Progress">üèóÔ∏è</span>
						}
					</td>
					<td id="column-planned" class="status-column">
						if c.Planned {
							<span title="Planned">üìÖ</span>
						}
					</td>
					<td id="column-value">
						{ c.ValueAsHumanStr() }
					</td>
					<td id="column-completed">
						if c.IsCompleted() {
							{ c.Completed.Format("2006-01-02 15:04:05") }
						}
					</td>
					<td id="column-created">{ c.Created.Format("2006-01-02 15:04:05") }</td>
					<td id="column-updated">{ c.Updated.Format("2006-01-02 15:04:05") }</td>
					<td id="column-delete">
						<button
							type="button"
							class="btn-delete"
							hx-delete={ string(templ.URL(fmt.Sprintf("/tasks/%s", c.Id))) }
							hx-target="#cards-table"
							hx-swap="innerHTML"
							title="Delete Task"
						>üóëÔ∏è</button>
					</td>
					<td></td>
				</tr>
			}
		</tbody>
	</table>
}

templ FilterPanel(st models.Settings, allTags []models.TaskTag) {
	<div class="filter-panel">
		<fieldset>
			<legend>Completed</legend>
			<div>
				<label for="completed-from">
					From:
					<input
						type="date"
						id={ consts.FILTER_COMPLETED_FROM }
						name={ consts.FILTER_COMPLETED_FROM }
						value={ st.TasksQuery.CompletedFrom.Format(consts.DEFAULT_DATE_FORMAT) }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_COMPLETED_FROM }
						hx-target="body"
						hx-swap="innerHTML"
					/>
				</label>
				<label for="completed-to">
					To:
					<input
						type="date"
						id={ consts.FILTER_COMPLETED_TO }
						name={ consts.FILTER_COMPLETED_TO }
						value={ st.TasksQuery.CompletedFrom.Format(consts.DEFAULT_DATE_FORMAT) }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_COMPLETED_TO }
						hx-target="body"
						hx-swap="innerHTML"
					/>
				</label>
				<label>
					<input
						if st.TasksQuery.FilterCompleted {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NAME_HIDE_COMPLETED }
						name={ consts.FILTER_NAME_HIDE_COMPLETED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NAME_HIDE_COMPLETED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Hide Completed
				</label>
				<label>
					<input
						if st.TasksQuery.FilterIncompleted {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NAME_HIDE_INCOMPLETED }
						name={ consts.FILTER_NAME_HIDE_INCOMPLETED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NAME_HIDE_INCOMPLETED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Hide Incompleted
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>WIP</legend>
			<div>
				<label>
					<input
						if st.TasksQuery.FilterWip {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_WIP }
						name={ consts.FILTER_WIP }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_WIP }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					WIP
				</label>
				<label>
					<input
						if st.TasksQuery.FilterNonWip {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NON_WIP }
						name={ consts.FILTER_NON_WIP }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NON_WIP }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Non-WIP
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>Planned</legend>
			<div>
				<label>
					<input
						if st.TasksQuery.Planned {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_PLANNED }
						name={ consts.FILTER_PLANNED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_PLANNED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Planned
				</label>
				<label>
					<input
						if st.TasksQuery.NonPlanned {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NON_PLANNED }
						name={ consts.FILTER_NON_PLANNED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NON_PLANNED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Not-Planned
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>Tags</legend>
			<div class="tags-filter">
				<div class="selected-tags">
					for _, tag := range st.TasksQuery.Tags {
						<span class="tag-pill">
							{ string(tag) }
							<button
								type="button"
								class="tag-remove-btn"
								hx-delete={ fmt.Sprintf("/filter/tag/%s", string(tag)) }
								hx-target="body"
							>√ó</button>
						</span>
					}
				</div>
				<select
					class="tag-select default-select"
					id={ consts.FILTER_TAGS }
					name={ consts.FILTER_TAGS }
					hx-post={ "/filter/" + consts.FILTER_TAGS }
					hx-target="body"
				>
					<option value="">Select a tag...</option>
					for _, tag := range allTags {
						<option value={ string(tag) }>{ string(tag) }</option>
					}
				</select>
			</div>
		</fieldset>
	</div>
}

templ TasksView(cards []models.Task, st models.Settings, allTags []models.TaskTag) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<link rel="icon" href="/assets/fav/favicon-32x32.png" type="image/png"/>
			<title>Tasks</title>
			<script src="https://unpkg.com/htmx.org@2.0.3/dist/htmx.js" integrity="sha384-BBDmZzVt6vjz5YbQqZPtFZW82o8QotoM7RUp5xOxV3nSJ8u2pSdtzFAbGKzTlKtg" crossorigin="anonymous"></script>
			<script src="/assets/js/main.js"></script>
			<link rel="stylesheet" href="/assets/css/main.css"/>
		</head>
		@TasksViewBody(cards, st, allTags)
	</html>
}

templ TasksViewBody(cards []models.Task, st models.Settings, allTags []models.TaskTag) {
	<body>
		<div class="container">
			<header>
				<nav>
					<ul>
						<li><a hx-get="/view/new-task" hx-target="#modal-card" hx-swap="outerHTML" hx-trigger="click, keydown[ctrlKey&&shiftKey&&key=='N'] from:body">New</a></li>
						<li><a href="/tasks">List</a></li>
						<li class="nav-bar-dropdown">
							<a href="#">Filters</a>
							<div class="dropdown-content">
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_COMPLETED_YESTERDAY } hx-target="body">Completed Yesterday</a>
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_COMPLETED_TODAY } hx-target="body">Completed Today</a>
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_COMPLETED_THIS_WEEK } hx-target="body">Completed This Week</a>
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_COMPLETED_LAST_WEEK } hx-target="body">Completed Last Week</a>
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_COMPLETED_LAST_TWO_WEEKS } hx-target="body">Completed Last Two Weeks</a>
								<a hx-post={ "/prepared-query/" + consts.PREPARED_QUERY_RESET } hx-target="body">Reset Filters</a>
							</div>
						</li>
					</ul>
				</nav>
			</header>
			@FilterPanel(st, allTags)
			@TaskTable(cards, st)
		</div>
		<div id="modal-card"></div>
	</body>
}


