package components

import (
	"fmt"
	"github.com/inaryzen/priotasks/consts"
	"github.com/inaryzen/priotasks/models"
)

templ FilterPanel(st models.Settings, allTags []models.TaskTag, totalTime string) {
	<div class="filter-panel">
		<fieldset>
			<legend>Search</legend>
			<input
				autofocus
				type="search"
				name={ consts.FILTER_SEARCH }
				placeholder="Search tasks..."
				hx-post={ "/filter/" + consts.FILTER_SEARCH }
				hx-trigger="keyup changed delay:600ms"
				hx-target="body"
				hx-swap="innerHTML"
				value={ st.TasksQuery.SearchText }
			/>
		</fieldset>
		<fieldset>
			<legend>Completed</legend>
			<div>
				<label for="completed-from">
					From:
					<input
						type="date"
						id={ consts.FILTER_COMPLETED_FROM }
						name={ consts.FILTER_COMPLETED_FROM }
						value={ st.TasksQuery.CompletedFrom.Format(consts.DEFAULT_DATE_FORMAT) }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_COMPLETED_FROM }
						hx-target="body"
						hx-swap="innerHTML"
					/>
				</label>
				<label for="completed-to">
					To:
					<input
						type="date"
						id={ consts.FILTER_COMPLETED_TO }
						name={ consts.FILTER_COMPLETED_TO }
						value={ st.TasksQuery.CompletedTo.Format(consts.DEFAULT_DATE_FORMAT) }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_COMPLETED_TO }
						hx-target="body"
						hx-swap="innerHTML"
					/>
				</label>
				<label>
					<input
						if st.TasksQuery.FilterCompleted {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NAME_HIDE_COMPLETED }
						name={ consts.FILTER_NAME_HIDE_COMPLETED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NAME_HIDE_COMPLETED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Hide Completed
				</label>
				<label>
					<input
						if st.TasksQuery.FilterIncompleted {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NAME_HIDE_INCOMPLETED }
						name={ consts.FILTER_NAME_HIDE_INCOMPLETED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NAME_HIDE_INCOMPLETED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Hide Incompleted
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>WIP</legend>
			<div>
				<label>
					<input
						if st.TasksQuery.FilterWip {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_WIP }
						name={ consts.FILTER_WIP }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_WIP }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					WIP
				</label>
				<label>
					<input
						if st.TasksQuery.FilterNonWip {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NON_WIP }
						name={ consts.FILTER_NON_WIP }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NON_WIP }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Non-WIP
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>Planned</legend>
			<div>
				<label>
					<input
						if st.TasksQuery.Planned {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_PLANNED }
						name={ consts.FILTER_PLANNED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_PLANNED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Planned
				</label>
				<label>
					<input
						if st.TasksQuery.NonPlanned {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_NON_PLANNED }
						name={ consts.FILTER_NON_PLANNED }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_NON_PLANNED }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Not-Planned
				</label>
			</div>
		</fieldset>
		<fieldset>
			<legend>Tags</legend>
			<div class="tags-filter">
				<div class="selected-tags">
					for _, tag := range st.TasksQuery.Tags {
						<span class="tag-pill">
							{ string(tag) }
							<button
								type="button"
								class="tag-remove-btn"
								hx-delete={ fmt.Sprintf("/filter/tag/%s", string(tag)) }
								hx-target="body"
							>Ã—</button>
						</span>
					}
				</div>
				<select
					class="tag-select default-select"
					id={ consts.FILTER_TAGS }
					name={ consts.FILTER_TAGS }
					hx-post={ "/filter/" + consts.FILTER_TAGS }
					hx-target="body"
				>
					<option value="" disabled selected>Select a tag...</option>
					for _, tag := range allTags {
						<option value={ string(tag) }>{ string(tag) }</option>
					}
				</select>
			</div>
		</fieldset>
		<fieldset>
			<legend>Limit</legend>
			<div>
				<label>
					<input
						if st.TasksQuery.EnableLimit {
							checked
						}
						type="checkbox"
						id={ consts.FILTER_LIMIT_ENABLE }
						name={ consts.FILTER_LIMIT_ENABLE }
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_LIMIT_ENABLE }
						hx-target="body"
						hx-swap="innerHTML"
					/>
					Limit tasks
				</label>
				<label for="limit-count">
					Count:
					<input
						type="number"
						id={ consts.FILTER_LIMIT_COUNT }
						name={ consts.FILTER_LIMIT_COUNT }
						value={ fmt.Sprintf("%d", st.TasksQuery.LimitCount) }
						min="1"
						max="1000"
						hx-trigger="change"
						hx-post={ "/filter/" + consts.FILTER_LIMIT_COUNT }
						hx-target="body"
						hx-swap="innerHTML"
					/>
				</label>
			</div>
		</fieldset>
		<fieldset style="margin-left: auto;">
			<legend>Time</legend>
			<div>
				<span>Total: { totalTime }</span>
			</div>
		</fieldset>
	</div>
}
